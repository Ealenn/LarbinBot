name: Docker

on:
  pull_request:
    branches: 
      - master
  push:
    branches: 
      - master
    tags:
      - '*'

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      -
        name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      -
        name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ealen/larbinbot:snapshot
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}












    # steps:
    #   -
    #     name: Checkout
    #     uses: actions/checkout@v2
    #   -
    #     name: Prepare
    #     id: prepare
    #     run: |
    #       DOCKER_IMAGE=ealen/larbinbot
    #       DOCKER_PLATFORMS=linux/amd64,linux/arm/v6,linux/arm/v7
    #       VERSION=snapshot
    #       if [[ $GITHUB_REF == refs/tags/* ]]; then
    #         VERSION=$(echo $GITHUB_REF | cut -d / -f 3)
    #       elif [[ $GITHUB_REF == refs/heads/master ]]; then
    #         VERSION=latest
    #       elif [[ $GITHUB_REF == refs/heads/* ]]; then
    #         VERSION=sandbox
    #       fi
    #       TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
    #       if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    #         TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
    #       fi
    #       echo ::set-output name=docker_image::${DOCKER_IMAGE}
    #       echo ::set-output name=version::${VERSION}
    #       echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
    #         --build-arg VERSION=${VERSION} \
    #         --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
    #         --build-arg VCS_REF=${GITHUB_SHA::8} \
    #         ${TAGS} --file ./Dockerfile .
    #   -
    #     name: Set up Docker Buildx
    #     id: buildx
    #     uses: crazy-max/ghaction-docker-buildx@v3
    #     with:
    #       buildx-version: latest
    #       qemu-version: latest
    #   -
    #     name: Available platforms
    #     run: echo ${{ steps.buildx.outputs.platforms }}
    #   -
    #     name: Available args
    #     run: echo ${{ steps.prepare.outputs.buildx_args }}
    #   -
    #     name: Docker Buildx (build)
    #     run: |
    #       docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}
    #   -
    #     name: Docker Login
    #     if: success()
    #     env:
    #       DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    #       DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    #     run: |
    #       echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin
    #   -
    #     name: Docker Buildx (push)
    #     if: success()
    #     run: |
    #       docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
    #   -
    #     name: Docker Check Manifest
    #     run: |
    #       docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
    #   -
    #     name: Clear
    #     if: always()
    #     run: |
    #       rm -f ${HOME}/.docker/config.json
